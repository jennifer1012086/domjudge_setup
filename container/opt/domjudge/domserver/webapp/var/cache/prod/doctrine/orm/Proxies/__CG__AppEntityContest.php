<?php

namespace Proxies\__CG__\App\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Contest extends \App\Entity\Contest implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'cid', 'externalid', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'shortname', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'activatetime', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'starttime', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'starttimeEnabled', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'freezetime', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'endtime', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'unfreezetime', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'finalizetime', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'finalizecomment', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'b', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'medalsEnabled', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'medal_categories', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'goldMedals', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'silverMedals', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'bronzeMedals', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'deactivatetime', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'activatetimeString', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'starttimeString', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'freezetimeString', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'endtimeString', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'unfreezetimeString', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'deactivatetimeString', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'enabled', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'processBalloons', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'public', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'bannerFile', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'clearBanner', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'openToAllTeams', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'teams', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'team_categories', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'clarifications', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'submissions', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'problems', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'internal_errors', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'removedIntervals', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'externalContestSources'];
        }

        return ['__isInitialized__', 'cid', 'externalid', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'shortname', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'activatetime', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'starttime', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'starttimeEnabled', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'freezetime', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'endtime', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'unfreezetime', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'finalizetime', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'finalizecomment', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'b', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'medalsEnabled', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'medal_categories', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'goldMedals', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'silverMedals', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'bronzeMedals', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'deactivatetime', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'activatetimeString', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'starttimeString', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'freezetimeString', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'endtimeString', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'unfreezetimeString', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'deactivatetimeString', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'enabled', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'processBalloons', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'public', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'bannerFile', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'clearBanner', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'openToAllTeams', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'teams', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'team_categories', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'clarifications', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'submissions', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'problems', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'internal_errors', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'removedIntervals', '' . "\0" . 'App\\Entity\\Contest' . "\0" . 'externalContestSources'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Contest $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getCid(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getCid();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCid', []);

        return parent::getCid();
    }

    /**
     * {@inheritDoc}
     */
    public function setExternalid(?string $externalid): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExternalid', [$externalid]);

        return parent::setExternalid($externalid);
    }

    /**
     * {@inheritDoc}
     */
    public function getExternalid(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExternalid', []);

        return parent::getExternalid();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(string $name): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setShortname(string $shortname): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShortname', [$shortname]);

        return parent::setShortname($shortname);
    }

    /**
     * {@inheritDoc}
     */
    public function getShortname(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShortname', []);

        return parent::getShortname();
    }

    /**
     * {@inheritDoc}
     */
    public function getShortDescription(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShortDescription', []);

        return parent::getShortDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function getActivatetime(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActivatetime', []);

        return parent::getActivatetime();
    }

    /**
     * {@inheritDoc}
     */
    public function setStarttime($starttime): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStarttime', [$starttime]);

        return parent::setStarttime($starttime);
    }

    /**
     * {@inheritDoc}
     */
    public function getStarttime(bool $nullWhenDisabled = true): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStarttime', [$nullWhenDisabled]);

        return parent::getStarttime($nullWhenDisabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getStartTimeObject(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartTimeObject', []);

        return parent::getStartTimeObject();
    }

    /**
     * {@inheritDoc}
     */
    public function setStarttimeEnabled(bool $starttimeEnabled): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStarttimeEnabled', [$starttimeEnabled]);

        return parent::setStarttimeEnabled($starttimeEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getStarttimeEnabled(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStarttimeEnabled', []);

        return parent::getStarttimeEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function getFreezetime(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFreezetime', []);

        return parent::getFreezetime();
    }

    /**
     * {@inheritDoc}
     */
    public function getEndtime(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndtime', []);

        return parent::getEndtime();
    }

    /**
     * {@inheritDoc}
     */
    public function getEndTimeObject(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndTimeObject', []);

        return parent::getEndTimeObject();
    }

    /**
     * {@inheritDoc}
     */
    public function getUnfreezetime(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnfreezetime', []);

        return parent::getUnfreezetime();
    }

    /**
     * {@inheritDoc}
     */
    public function getFinalizetime(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFinalizetime', []);

        return parent::getFinalizetime();
    }

    /**
     * {@inheritDoc}
     */
    public function setFinalizetime($finalizetimeString): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFinalizetime', [$finalizetimeString]);

        return parent::setFinalizetime($finalizetimeString);
    }

    /**
     * {@inheritDoc}
     */
    public function getFinalizecomment(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFinalizecomment', []);

        return parent::getFinalizecomment();
    }

    /**
     * {@inheritDoc}
     */
    public function setFinalizecomment(?string $finalizecomment): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFinalizecomment', [$finalizecomment]);

        return parent::setFinalizecomment($finalizecomment);
    }

    /**
     * {@inheritDoc}
     */
    public function getB(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getB', []);

        return parent::getB();
    }

    /**
     * {@inheritDoc}
     */
    public function setB(?int $b)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setB', [$b]);

        return parent::setB($b);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeactivatetime(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeactivatetime', []);

        return parent::getDeactivatetime();
    }

    /**
     * {@inheritDoc}
     */
    public function setActivatetimeString(?string $activatetimeString): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActivatetimeString', [$activatetimeString]);

        return parent::setActivatetimeString($activatetimeString);
    }

    /**
     * {@inheritDoc}
     */
    public function getActivatetimeString(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActivatetimeString', []);

        return parent::getActivatetimeString();
    }

    /**
     * {@inheritDoc}
     */
    public function setStarttimeString(string $starttimeString): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStarttimeString', [$starttimeString]);

        return parent::setStarttimeString($starttimeString);
    }

    /**
     * {@inheritDoc}
     */
    public function getStarttimeString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStarttimeString', []);

        return parent::getStarttimeString();
    }

    /**
     * {@inheritDoc}
     */
    public function setFreezetimeString(?string $freezetimeString): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFreezetimeString', [$freezetimeString]);

        return parent::setFreezetimeString($freezetimeString);
    }

    /**
     * {@inheritDoc}
     */
    public function getFreezetimeString(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFreezetimeString', []);

        return parent::getFreezetimeString();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndtimeString(?string $endtimeString): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndtimeString', [$endtimeString]);

        return parent::setEndtimeString($endtimeString);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndtimeString(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndtimeString', []);

        return parent::getEndtimeString();
    }

    /**
     * {@inheritDoc}
     */
    public function setUnfreezetimeString(?string $unfreezetimeString): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUnfreezetimeString', [$unfreezetimeString]);

        return parent::setUnfreezetimeString($unfreezetimeString);
    }

    /**
     * {@inheritDoc}
     */
    public function getUnfreezetimeString(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnfreezetimeString', []);

        return parent::getUnfreezetimeString();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeactivatetimeString(?string $deactivatetimeString): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeactivatetimeString', [$deactivatetimeString]);

        return parent::setDeactivatetimeString($deactivatetimeString);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeactivatetimeString(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeactivatetimeString', []);

        return parent::getDeactivatetimeString();
    }

    /**
     * {@inheritDoc}
     */
    public function setActivatetime(string $activatetime): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActivatetime', [$activatetime]);

        return parent::setActivatetime($activatetime);
    }

    /**
     * {@inheritDoc}
     */
    public function setFreezetime(string $freezetime): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFreezetime', [$freezetime]);

        return parent::setFreezetime($freezetime);
    }

    /**
     * {@inheritDoc}
     */
    public function setEndtime(string $endtime): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndtime', [$endtime]);

        return parent::setEndtime($endtime);
    }

    /**
     * {@inheritDoc}
     */
    public function setUnfreezetime(string $unfreezetime): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUnfreezetime', [$unfreezetime]);

        return parent::setUnfreezetime($unfreezetime);
    }

    /**
     * {@inheritDoc}
     */
    public function setDeactivatetime(string $deactivatetime): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeactivatetime', [$deactivatetime]);

        return parent::setDeactivatetime($deactivatetime);
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled(bool $enabled): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnabled', [$enabled]);

        return parent::setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnabled(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnabled', []);

        return parent::getEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setProcessBalloons(bool $processBalloons): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProcessBalloons', [$processBalloons]);

        return parent::setProcessBalloons($processBalloons);
    }

    /**
     * {@inheritDoc}
     */
    public function getProcessBalloons(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProcessBalloons', []);

        return parent::getProcessBalloons();
    }

    /**
     * {@inheritDoc}
     */
    public function setMedalsEnabled(bool $medalsEnabled): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMedalsEnabled', [$medalsEnabled]);

        return parent::setMedalsEnabled($medalsEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getMedalsEnabled(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMedalsEnabled', []);

        return parent::getMedalsEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function getMedalCategories(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMedalCategories', []);

        return parent::getMedalCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function addMedalCategory(\App\Entity\TeamCategory $medalCategory): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMedalCategory', [$medalCategory]);

        return parent::addMedalCategory($medalCategory);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMedalCategories(\App\Entity\TeamCategory $medalCategory): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMedalCategories', [$medalCategory]);

        return parent::removeMedalCategories($medalCategory);
    }

    /**
     * {@inheritDoc}
     */
    public function setGoldMedals(int $goldMedals): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGoldMedals', [$goldMedals]);

        return parent::setGoldMedals($goldMedals);
    }

    /**
     * {@inheritDoc}
     */
    public function getGoldMedals(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGoldMedals', []);

        return parent::getGoldMedals();
    }

    /**
     * {@inheritDoc}
     */
    public function setSilverMedals(int $silverMedals): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSilverMedals', [$silverMedals]);

        return parent::setSilverMedals($silverMedals);
    }

    /**
     * {@inheritDoc}
     */
    public function getSilverMedals(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSilverMedals', []);

        return parent::getSilverMedals();
    }

    /**
     * {@inheritDoc}
     */
    public function setBronzeMedals(int $bronzeMedals): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBronzeMedals', [$bronzeMedals]);

        return parent::setBronzeMedals($bronzeMedals);
    }

    /**
     * {@inheritDoc}
     */
    public function getBronzeMedals(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBronzeMedals', []);

        return parent::getBronzeMedals();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublic(bool $public): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublic', [$public]);

        return parent::setPublic($public);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublic(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublic', []);

        return parent::getPublic();
    }

    /**
     * {@inheritDoc}
     */
    public function setOpenToAllTeams(bool $openToAllTeams): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOpenToAllTeams', [$openToAllTeams]);

        return parent::setOpenToAllTeams($openToAllTeams);
    }

    /**
     * {@inheritDoc}
     */
    public function isOpenToAllTeams(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isOpenToAllTeams', []);

        return parent::isOpenToAllTeams();
    }

    /**
     * {@inheritDoc}
     */
    public function addTeam(\App\Entity\Team $team): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTeam', [$team]);

        return parent::addTeam($team);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTeam(\App\Entity\Team $team): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTeam', [$team]);

        parent::removeTeam($team);
    }

    /**
     * {@inheritDoc}
     */
    public function getTeams(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeams', []);

        return parent::getTeams();
    }

    /**
     * {@inheritDoc}
     */
    public function addProblem(\App\Entity\ContestProblem $problem): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProblem', [$problem]);

        return parent::addProblem($problem);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProblem(\App\Entity\ContestProblem $problem): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProblem', [$problem]);

        parent::removeProblem($problem);
    }

    /**
     * {@inheritDoc}
     */
    public function getProblems(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProblems', []);

        return parent::getProblems();
    }

    /**
     * {@inheritDoc}
     */
    public function addClarification(\App\Entity\Clarification $clarification): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addClarification', [$clarification]);

        return parent::addClarification($clarification);
    }

    /**
     * {@inheritDoc}
     */
    public function removeClarification(\App\Entity\Clarification $clarification): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeClarification', [$clarification]);

        parent::removeClarification($clarification);
    }

    /**
     * {@inheritDoc}
     */
    public function getClarifications(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClarifications', []);

        return parent::getClarifications();
    }

    /**
     * {@inheritDoc}
     */
    public function addSubmission(\App\Entity\Submission $submission): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSubmission', [$submission]);

        return parent::addSubmission($submission);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSubmission(\App\Entity\Submission $submission): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSubmission', [$submission]);

        parent::removeSubmission($submission);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubmissions(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubmissions', []);

        return parent::getSubmissions();
    }

    /**
     * {@inheritDoc}
     */
    public function addInternalError(\App\Entity\InternalError $internalError): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addInternalError', [$internalError]);

        return parent::addInternalError($internalError);
    }

    /**
     * {@inheritDoc}
     */
    public function removeInternalError(\App\Entity\InternalError $internalError): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeInternalError', [$internalError]);

        parent::removeInternalError($internalError);
    }

    /**
     * {@inheritDoc}
     */
    public function getInternalErrors(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInternalErrors', []);

        return parent::getInternalErrors();
    }

    /**
     * {@inheritDoc}
     */
    public function getDuration(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDuration', []);

        return parent::getDuration();
    }

    /**
     * {@inheritDoc}
     */
    public function getScoreboardFreezeDuration(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getScoreboardFreezeDuration', []);

        return parent::getScoreboardFreezeDuration();
    }

    /**
     * {@inheritDoc}
     */
    public function isActive(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isActive', []);

        return parent::isActive();
    }

    /**
     * {@inheritDoc}
     */
    public function getAbsoluteTime(?string $time_string)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAbsoluteTime', [$time_string]);

        return parent::getAbsoluteTime($time_string);
    }

    /**
     * {@inheritDoc}
     */
    public function addRemovedInterval(\App\Entity\RemovedInterval $removedInterval): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRemovedInterval', [$removedInterval]);

        return parent::addRemovedInterval($removedInterval);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRemovedInterval(\App\Entity\RemovedInterval $removedInterval): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRemovedInterval', [$removedInterval]);

        parent::removeRemovedInterval($removedInterval);
    }

    /**
     * {@inheritDoc}
     */
    public function getRemovedIntervals(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRemovedIntervals', []);

        return parent::getRemovedIntervals();
    }

    /**
     * {@inheritDoc}
     */
    public function getContestTime(float $wallTime): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContestTime', [$wallTime]);

        return parent::getContestTime($wallTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getDataForJuryInterface(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDataForJuryInterface', []);

        return parent::getDataForJuryInterface();
    }

    /**
     * {@inheritDoc}
     */
    public function getState(): ?array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getState', []);

        return parent::getState();
    }

    /**
     * {@inheritDoc}
     */
    public function getMinutesRemaining(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMinutesRemaining', []);

        return parent::getMinutesRemaining();
    }

    /**
     * {@inheritDoc}
     */
    public function getFreezeData(): \App\Utils\FreezeData
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFreezeData', []);

        return parent::getFreezeData();
    }

    /**
     * {@inheritDoc}
     */
    public function updateTimes(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateTimes', []);

        parent::updateTimes();
    }

    /**
     * {@inheritDoc}
     */
    public function validate(\Symfony\Component\Validator\Context\ExecutionContextInterface $context): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'validate', [$context]);

        parent::validate($context);
    }

    /**
     * {@inheritDoc}
     */
    public function isTimeInContest(float $time): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isTimeInContest', [$time]);

        return parent::isTimeInContest($time);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountdownString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountdownString', []);

        return parent::getCountdownString();
    }

    /**
     * {@inheritDoc}
     */
    public function getOpenToAllTeams(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOpenToAllTeams', []);

        return parent::getOpenToAllTeams();
    }

    /**
     * {@inheritDoc}
     */
    public function getTeamCategories(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeamCategories', []);

        return parent::getTeamCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function addTeamCategory(\App\Entity\TeamCategory $teamCategory): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTeamCategory', [$teamCategory]);

        return parent::addTeamCategory($teamCategory);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTeamCategory(\App\Entity\TeamCategory $teamCategory): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTeamCategory', [$teamCategory]);

        return parent::removeTeamCategory($teamCategory);
    }

    /**
     * {@inheritDoc}
     */
    public function getExternalContestSources(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExternalContestSources', []);

        return parent::getExternalContestSources();
    }

    /**
     * {@inheritDoc}
     */
    public function addExternalContestSource(\App\Entity\ExternalContestSource $externalContestSource): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addExternalContestSource', [$externalContestSource]);

        return parent::addExternalContestSource($externalContestSource);
    }

    /**
     * {@inheritDoc}
     */
    public function removeExternalContestSource(\App\Entity\ExternalContestSource $externalContestSource): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeExternalContestSource', [$externalContestSource]);

        return parent::removeExternalContestSource($externalContestSource);
    }

    /**
     * {@inheritDoc}
     */
    public function getBannerFile(): ?\Symfony\Component\HttpFoundation\File\UploadedFile
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBannerFile', []);

        return parent::getBannerFile();
    }

    /**
     * {@inheritDoc}
     */
    public function setBannerFile(?\Symfony\Component\HttpFoundation\File\UploadedFile $bannerFile): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBannerFile', [$bannerFile]);

        return parent::setBannerFile($bannerFile);
    }

    /**
     * {@inheritDoc}
     */
    public function isClearBanner(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isClearBanner', []);

        return parent::isClearBanner();
    }

    /**
     * {@inheritDoc}
     */
    public function setClearBanner(bool $clearBanner): \App\Entity\Contest
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClearBanner', [$clearBanner]);

        return parent::setClearBanner($clearBanner);
    }

    /**
     * {@inheritDoc}
     */
    public function getAssetProperties(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAssetProperties', []);

        return parent::getAssetProperties();
    }

    /**
     * {@inheritDoc}
     */
    public function getAssetFile(string $property): ?\Symfony\Component\HttpFoundation\File\UploadedFile
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAssetFile', [$property]);

        return parent::getAssetFile($property);
    }

    /**
     * {@inheritDoc}
     */
    public function isClearAsset(string $property): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isClearAsset', [$property]);

        return parent::isClearAsset($property);
    }

    /**
     * {@inheritDoc}
     */
    public function getApiIdField(\App\Service\EventLogService $eventLogService): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApiIdField', [$eventLogService]);

        return parent::getApiIdField($eventLogService);
    }

    /**
     * {@inheritDoc}
     */
    public function getApiId(\App\Service\EventLogService $eventLogService): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApiId', [$eventLogService]);

        return parent::getApiId($eventLogService);
    }

}
