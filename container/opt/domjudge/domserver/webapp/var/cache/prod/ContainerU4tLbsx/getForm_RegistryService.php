<?php

namespace ContainerU4tLbsx;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getForm_RegistryService extends App_KernelProdContainer
{
    /*
     * Gets the private 'form.registry' shared service.
     *
     * @return \Symfony\Component\Form\FormRegistry
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 5).'/lib/vendor/symfony/form/FormRegistryInterface.php';
        include_once \dirname(__DIR__, 5).'/lib/vendor/symfony/form/FormRegistry.php';
        include_once \dirname(__DIR__, 5).'/lib/vendor/symfony/form/FormExtensionInterface.php';
        include_once \dirname(__DIR__, 5).'/lib/vendor/symfony/form/Extension/DependencyInjection/DependencyInjectionExtension.php';
        include_once \dirname(__DIR__, 5).'/lib/vendor/symfony/form/ResolvedFormTypeFactoryInterface.php';
        include_once \dirname(__DIR__, 5).'/lib/vendor/symfony/form/ResolvedFormTypeFactory.php';

        return $container->privates['form.registry'] = new \Symfony\Component\Form\FormRegistry([0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'App\\Form\\Type\\AbstractExternalIdEntityType' => ['privates', 'App\\Form\\Type\\AbstractExternalIdEntityType', 'getAbstractExternalIdEntityTypeService', true],
            'App\\Form\\Type\\BootstrapFileType' => ['privates', 'App\\Form\\Type\\BootstrapFileType', 'getBootstrapFileTypeService', true],
            'App\\Form\\Type\\ContestExportType' => ['privates', 'App\\Form\\Type\\ContestExportType', 'getContestExportTypeService', true],
            'App\\Form\\Type\\ContestImportType' => ['privates', 'App\\Form\\Type\\ContestImportType', 'getContestImportTypeService', true],
            'App\\Form\\Type\\ContestProblemType' => ['privates', 'App\\Form\\Type\\ContestProblemType', 'getContestProblemTypeService', true],
            'App\\Form\\Type\\ContestType' => ['privates', 'App\\Form\\Type\\ContestType', 'getContestTypeService', true],
            'App\\Form\\Type\\ExecutableType' => ['privates', 'App\\Form\\Type\\ExecutableType', 'getExecutableTypeService', true],
            'App\\Form\\Type\\ExecutableUploadType' => ['privates', 'App\\Form\\Type\\ExecutableUploadType', 'getExecutableUploadTypeService', true],
            'App\\Form\\Type\\ExternalContestSourceType' => ['privates', 'App\\Form\\Type\\ExternalContestSourceType', 'getExternalContestSourceTypeService', true],
            'App\\Form\\Type\\ExternalSourceWarningsFilterType' => ['privates', 'App\\Form\\Type\\ExternalSourceWarningsFilterType', 'getExternalSourceWarningsFilterTypeService', true],
            'App\\Form\\Type\\FinalizeContestType' => ['privates', 'App\\Form\\Type\\FinalizeContestType', 'getFinalizeContestTypeService', true],
            'App\\Form\\Type\\GeneratePasswordsType' => ['privates', 'App\\Form\\Type\\GeneratePasswordsType', 'getGeneratePasswordsTypeService', true],
            'App\\Form\\Type\\ICPCCmsType' => ['privates', 'App\\Form\\Type\\ICPCCmsType', 'getICPCCmsTypeService', true],
            'App\\Form\\Type\\JsonImportType' => ['privates', 'App\\Form\\Type\\JsonImportType', 'getJsonImportTypeService', true],
            'App\\Form\\Type\\JudgehostType' => ['privates', 'App\\Form\\Type\\JudgehostType', 'getJudgehostTypeService', true],
            'App\\Form\\Type\\JudgehostsType' => ['privates', 'App\\Form\\Type\\JudgehostsType', 'getJudgehostsTypeService', true],
            'App\\Form\\Type\\LanguageType' => ['privates', 'App\\Form\\Type\\LanguageType', 'getLanguageTypeService', true],
            'App\\Form\\Type\\PrintType' => ['privates', 'App\\Form\\Type\\PrintType', 'getPrintTypeService', true],
            'App\\Form\\Type\\ProblemAttachmentType' => ['privates', 'App\\Form\\Type\\ProblemAttachmentType', 'getProblemAttachmentTypeService', true],
            'App\\Form\\Type\\ProblemType' => ['privates', 'App\\Form\\Type\\ProblemType', 'getProblemTypeService', true],
            'App\\Form\\Type\\ProblemUploadType' => ['privates', 'App\\Form\\Type\\ProblemUploadType', 'getProblemUploadTypeService', true],
            'App\\Form\\Type\\ProblemsImportType' => ['privates', 'App\\Form\\Type\\ProblemsImportType', 'getProblemsImportTypeService', true],
            'App\\Form\\Type\\RejudgingType' => ['privates', 'App\\Form\\Type\\RejudgingType', 'getRejudgingTypeService', true],
            'App\\Form\\Type\\RemovedIntervalType' => ['privates', 'App\\Form\\Type\\RemovedIntervalType', 'getRemovedIntervalTypeService', true],
            'App\\Form\\Type\\SubmissionsFilterType' => ['privates', 'App\\Form\\Type\\SubmissionsFilterType', 'getSubmissionsFilterTypeService', true],
            'App\\Form\\Type\\SubmitProblemType' => ['privates', 'App\\Form\\Type\\SubmitProblemType', 'getSubmitProblemTypeService', true],
            'App\\Form\\Type\\TeamAffiliationType' => ['privates', 'App\\Form\\Type\\TeamAffiliationType', 'getTeamAffiliationTypeService', true],
            'App\\Form\\Type\\TeamCategoryType' => ['privates', 'App\\Form\\Type\\TeamCategoryType', 'getTeamCategoryTypeService', true],
            'App\\Form\\Type\\TeamClarificationType' => ['privates', 'App\\Form\\Type\\TeamClarificationType', 'getTeamClarificationTypeService', true],
            'App\\Form\\Type\\TeamType' => ['privates', 'App\\Form\\Type\\TeamType', 'getTeamTypeService', true],
            'App\\Form\\Type\\TsvImportType' => ['privates', 'App\\Form\\Type\\TsvImportType', 'getTsvImportTypeService', true],
            'App\\Form\\Type\\UserRegistrationType' => ['privates', 'App\\Form\\Type\\UserRegistrationType', 'getUserRegistrationTypeService', true],
            'App\\Form\\Type\\UserType' => ['privates', 'App\\Form\\Type\\UserType', 'getUserTypeService', true],
            'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => ['privates', 'form.type.entity', 'getForm_Type_EntityService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => ['privates', 'form.type.choice', 'getForm_Type_ChoiceService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ColorType' => ['privates', 'form.type.color', 'getForm_Type_ColorService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' => ['services', '.container.private.form.type.file', 'get_Container_Private_Form_Type_FileService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => ['privates', 'form.type.form', 'getForm_Type_FormService', true],
        ], [
            'App\\Form\\Type\\AbstractExternalIdEntityType' => '?',
            'App\\Form\\Type\\BootstrapFileType' => '?',
            'App\\Form\\Type\\ContestExportType' => '?',
            'App\\Form\\Type\\ContestImportType' => '?',
            'App\\Form\\Type\\ContestProblemType' => '?',
            'App\\Form\\Type\\ContestType' => '?',
            'App\\Form\\Type\\ExecutableType' => '?',
            'App\\Form\\Type\\ExecutableUploadType' => '?',
            'App\\Form\\Type\\ExternalContestSourceType' => '?',
            'App\\Form\\Type\\ExternalSourceWarningsFilterType' => '?',
            'App\\Form\\Type\\FinalizeContestType' => '?',
            'App\\Form\\Type\\GeneratePasswordsType' => '?',
            'App\\Form\\Type\\ICPCCmsType' => '?',
            'App\\Form\\Type\\JsonImportType' => '?',
            'App\\Form\\Type\\JudgehostType' => '?',
            'App\\Form\\Type\\JudgehostsType' => '?',
            'App\\Form\\Type\\LanguageType' => '?',
            'App\\Form\\Type\\PrintType' => '?',
            'App\\Form\\Type\\ProblemAttachmentType' => '?',
            'App\\Form\\Type\\ProblemType' => '?',
            'App\\Form\\Type\\ProblemUploadType' => '?',
            'App\\Form\\Type\\ProblemsImportType' => '?',
            'App\\Form\\Type\\RejudgingType' => '?',
            'App\\Form\\Type\\RemovedIntervalType' => '?',
            'App\\Form\\Type\\SubmissionsFilterType' => '?',
            'App\\Form\\Type\\SubmitProblemType' => '?',
            'App\\Form\\Type\\TeamAffiliationType' => '?',
            'App\\Form\\Type\\TeamCategoryType' => '?',
            'App\\Form\\Type\\TeamClarificationType' => '?',
            'App\\Form\\Type\\TeamType' => '?',
            'App\\Form\\Type\\TsvImportType' => '?',
            'App\\Form\\Type\\UserRegistrationType' => '?',
            'App\\Form\\Type\\UserType' => '?',
            'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ColorType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => '?',
        ]), ['Symfony\\Component\\Form\\Extension\\Core\\Type\\ButtonType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['App\\Form\\Extension\\IconButtonExtension'] ?? ($container->privates['App\\Form\\Extension\\IconButtonExtension'] = new \App\Form\Extension\IconButtonExtension()));
        }, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['nelmio_api_doc.form.documentation_extension'] ?? ($container->privates['nelmio_api_doc.form.documentation_extension'] = new \Nelmio\ApiDocBundle\Form\Extension\DocumentationExtension()));
            yield 1 => ($container->privates['form.type_extension.form.transformation_failure_handling'] ?? ($container->privates['form.type_extension.form.transformation_failure_handling'] = new \Symfony\Component\Form\Extension\Core\Type\TransformationFailureExtension(NULL)));
            yield 2 => ($container->privates['form.type_extension.form.http_foundation'] ?? $container->load('getForm_TypeExtension_Form_HttpFoundationService'));
            yield 3 => ($container->privates['form.type_extension.form.validator'] ?? $container->load('getForm_TypeExtension_Form_ValidatorService'));
            yield 4 => ($container->privates['form.type_extension.csrf'] ?? $container->load('getForm_TypeExtension_CsrfService'));
            yield 5 => ($container->privates['fos_rest.form.extension.csrf_disable'] ?? $container->load('getFosRest_Form_Extension_CsrfDisableService'));
        }, 6), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_extension.repeated.validator'] ?? ($container->privates['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension()));
        }, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_extension.submit.validator'] ?? ($container->privates['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension()));
        }, 1)], new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_guesser.doctrine'] ?? $container->load('getForm_TypeGuesser_DoctrineService'));
            yield 1 => ($container->privates['form.type_guesser.validator'] ?? $container->load('getForm_TypeGuesser_ValidatorService'));
        }, 2))], new \Symfony\Component\Form\ResolvedFormTypeFactory());
    }
}
