<?php

namespace ContainerU4tLbsx;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getConsole_Command_FormDebugService extends App_KernelProdContainer
{
    /*
     * Gets the private 'console.command.form_debug' shared service.
     *
     * @return \Symfony\Component\Form\Command\DebugCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 5).'/lib/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 5).'/lib/vendor/symfony/form/Command/DebugCommand.php';
        include_once \dirname(__DIR__, 5).'/lib/vendor/symfony/http-kernel/Debug/FileLinkFormatter.php';

        $container->privates['console.command.form_debug'] = $instance = new \Symfony\Component\Form\Command\DebugCommand(($container->privates['form.registry'] ?? $container->load('getForm_RegistryService')), [0 => 'Symfony\\Component\\Form\\Extension\\Core\\Type', 1 => 'App\\Form\\Type', 2 => 'Symfony\\Bridge\\Doctrine\\Form\\Type'], [0 => 'App\\Form\\Type\\AbstractExternalIdEntityType', 1 => 'App\\Form\\Type\\BootstrapFileType', 2 => 'App\\Form\\Type\\ContestExportType', 3 => 'App\\Form\\Type\\ContestImportType', 4 => 'App\\Form\\Type\\ContestProblemType', 5 => 'App\\Form\\Type\\ContestType', 6 => 'App\\Form\\Type\\ExecutableType', 7 => 'App\\Form\\Type\\ExecutableUploadType', 8 => 'App\\Form\\Type\\ExternalContestSourceType', 9 => 'App\\Form\\Type\\ExternalSourceWarningsFilterType', 10 => 'App\\Form\\Type\\FinalizeContestType', 11 => 'App\\Form\\Type\\GeneratePasswordsType', 12 => 'App\\Form\\Type\\ICPCCmsType', 13 => 'App\\Form\\Type\\JsonImportType', 14 => 'App\\Form\\Type\\JudgehostType', 15 => 'App\\Form\\Type\\JudgehostsType', 16 => 'App\\Form\\Type\\LanguageType', 17 => 'App\\Form\\Type\\PrintType', 18 => 'App\\Form\\Type\\ProblemAttachmentType', 19 => 'App\\Form\\Type\\ProblemType', 20 => 'App\\Form\\Type\\ProblemUploadType', 21 => 'App\\Form\\Type\\ProblemsImportType', 22 => 'App\\Form\\Type\\RejudgingType', 23 => 'App\\Form\\Type\\RemovedIntervalType', 24 => 'App\\Form\\Type\\SubmissionsFilterType', 25 => 'App\\Form\\Type\\SubmitProblemType', 26 => 'App\\Form\\Type\\TeamAffiliationType', 27 => 'App\\Form\\Type\\TeamCategoryType', 28 => 'App\\Form\\Type\\TeamClarificationType', 29 => 'App\\Form\\Type\\TeamType', 30 => 'App\\Form\\Type\\TsvImportType', 31 => 'App\\Form\\Type\\UserRegistrationType', 32 => 'App\\Form\\Type\\UserType', 33 => 'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType', 34 => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType', 35 => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType', 36 => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType', 37 => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ColorType'], [0 => 'App\\Form\\Extension\\IconButtonExtension', 1 => 'Nelmio\\ApiDocBundle\\Form\\Extension\\DocumentationExtension', 2 => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TransformationFailureExtension', 3 => 'Symfony\\Component\\Form\\Extension\\HttpFoundation\\Type\\FormTypeHttpFoundationExtension', 4 => 'Symfony\\Component\\Form\\Extension\\Validator\\Type\\FormTypeValidatorExtension', 5 => 'Symfony\\Component\\Form\\Extension\\Validator\\Type\\RepeatedTypeValidatorExtension', 6 => 'Symfony\\Component\\Form\\Extension\\Validator\\Type\\SubmitTypeValidatorExtension', 7 => 'Symfony\\Component\\Form\\Extension\\Csrf\\Type\\FormTypeCsrfExtension', 8 => 'FOS\\RestBundle\\Form\\Extension\\DisableCSRFExtension'], [0 => 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser', 1 => 'Symfony\\Component\\Form\\Extension\\Validator\\ValidatorTypeGuesser'], ($container->privates['debug.file_link_formatter'] ?? ($container->privates['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL))));

        $instance->setName('debug:form');
        $instance->setDescription('Display form type information');

        return $instance;
    }
}
